// components/BookingForm.js (PHI√äN B·∫¢N ƒê·∫≤NG C·∫§P - Form ƒê·∫∑t ch·ªó Chi ti·∫øt)

import React, { useState, useEffect, useCallback } from 'react';
import { useAuth } from '@/context/AuthContext';
import { motion } from 'framer-motion';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faCalendarAlt, faClock, faCar, faMotorcycle, faDollarSign, faInfoCircle, faSpinner } from '@fortawesome/free-solid-svg-icons';

// --- Helper Functions (C√≥ th·ªÉ t√°ch ra utils) ---
// ƒê·ªãnh d·∫°ng ti·ªÅn t·ªá Vi·ªát Nam
const formatCurrency = (amount) => {
    if (typeof amount !== 'number' || isNaN(amount)) return '0 VNƒê';
    return amount.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' });
};

// H√†m l·∫•y gi√° c∆° s·ªü d·ª±a tr√™n lo·∫°i xe
const getBasePrice = (pricingTiers, vehicleType) => {
    if (!pricingTiers || !vehicleType) return 0;
    const tier = pricingTiers[vehicleType]; // VD: pricingTiers['car_4_seats']
    return tier?.basePricePerHour || 0;
};

// H√†m t√≠nh s·ªë gi·ªù l√†m tr√≤n l√™n
const calculateHours = (start, end) => {
    if (!start || !end || end <= start) return 0;
    const diffMs = Math.abs(end - start);
    return Math.ceil(diffMs / 36e5); // 36e5 = 1 gi·ªù (ms)
};

// H√†m l·∫•y gi√° tr·ªã m·∫∑c ƒë·ªãnh cho datetime-local (hi·ªán t·∫°i + 15 ph√∫t)
const getDefaultStartTime = () => {
    const now = new Date();
    now.setMinutes(now.getMinutes() + 15); // Th√™m 15 ph√∫t
    now.setSeconds(0);
    now.setMilliseconds(0);
    // ƒê·ªãnh d·∫°ng YYYY-MM-DDTHH:mm
    return now.toISOString().slice(0, 16);
};
// H√†m l·∫•y gi√° tr·ªã m·∫∑c ƒë·ªãnh cho end time (start time + 1 gi·ªù)
const getDefaultEndTime = (startTimeStr) => {
    if (!startTimeStr) return '';
    const start = new Date(startTimeStr);
    start.setHours(start.getHours() + 1);
    return start.toISOString().slice(0, 16);
}


// --- Component Ch√≠nh ---
const BookingForm = ({ slot, parkingLot, user }) => {
    // --- State cho Form ---
    const [startTime, setStartTime] = useState(getDefaultStartTime());
    const [endTime, setEndTime] = useState(getDefaultEndTime(startTime));
    const [vehicleNumber, setVehicleNumber] = useState(''); // L·∫•y t·ª´ profile user n·∫øu c√≥ xe m·∫∑c ƒë·ªãnh
    // Gi·∫£ s·ª≠ l·∫•y lo·∫°i xe ph√π h·ª£p v·ªõi √¥ ƒë√£ ch·ªçn, ho·∫∑c xe m·∫∑c ƒë·ªãnh c·ªßa user
    const defaultVehicleType = slot?.vehicleType !== 'any' ? slot.vehicleType : (user?.profile?.defaultVehicleType || 'car_4_seats');
    const [vehicleType, setVehicleType] = useState(defaultVehicleType); // TODO: Cho ph√©p user ch·ªçn xe n·∫øu c√≥ nhi·ªÅu xe
    const [notes, setNotes] = useState('');

    // --- State cho T√≠nh to√°n & Hi·ªÉn th·ªã ---
    const [calculatedHours, setCalculatedHours] = useState(0);
    const [baseParkingFee, setBaseParkingFee] = useState(0);
    const [dynamicPriceInfo, setDynamicPriceInfo] = useState(null); // { price: number, reason: string }
    const [serviceFee] = useState(5000); // Ph√≠ d·ªãch v·ª• c·ªë ƒë·ªãnh (v√≠ d·ª•)
    const [totalCost, setTotalCost] = useState(serviceFee);
    const [timeError, setTimeError] = useState('');

    // --- State cho vi·ªác Submit ---
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [submitStatus, setSubmitStatus] = useState({ success: false, error: null }); // { success: boolean, error: string | null }

    const { token } = useAuth(); // L·∫•y token ƒë·ªÉ g·ªçi API
    const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000/api';

    // --- Callback T√≠nh to√°n Chi ph√≠ (S·ª≠ d·ª•ng useCallback ƒë·ªÉ t·ªëi ∆∞u) ---
    const calculateCosts = useCallback(() => {
        setTimeError('');
        const start = startTime ? new Date(startTime) : null;
        const end = endTime ? new Date(endTime) : null;

        if (start && end) {
            if (end <= start) {
                setTimeError('Th·ªùi gian k·∫øt th√∫c ph·∫£i sau th·ªùi gian b·∫Øt ƒë·∫ßu.');
                setCalculatedHours(0);
                setBaseParkingFee(0);
                setTotalCost(serviceFee);
                setDynamicPriceInfo(null);
                return;
            }
             if (start < new Date()) {
                 setTimeError('Th·ªùi gian b·∫Øt ƒë·∫ßu kh√¥ng ƒë∆∞·ª£c ·ªü trong qu√° kh·ª©.');
                 // V·∫´n t√≠nh th·ª≠ gi√° ƒë·ªÉ user tham kh·∫£o
             }


            const hours = calculateHours(start, end);
            const basePricePerHour = getBasePrice(parkingLot.pricingTiers, vehicleType);
            const fee = hours * basePricePerHour;

            setCalculatedHours(hours);
            setBaseParkingFee(fee);
            setTotalCost(fee + serviceFee); // T·∫°m th·ªùi d√πng gi√° c∆° s·ªü

            // --- (B√πng n·ªï üí•) G·ªçi API Backend ƒë·ªÉ l·∫•y Gi√° AI D·ª± ki·∫øn ---
            // T·∫°o m·ªôt API endpoint m·ªõi: GET /api/pricing/estimate?lotId=...&start=...&end=...&vehicleType=...
            const fetchDynamicPrice = async () => {
                try {
                    // T·∫°m th·ªùi comment out, c·∫ßn API backend
                    /*
                    const params = new URLSearchParams({
                        parkingLotId: parkingLot._id,
                        startTime: start.toISOString(),
                        endTime: end.toISOString(),
                        vehicleType: vehicleType
                    });
                    const priceResponse = await fetch(`${API_URL}/pricing/estimate?${params.toString()}`, {
                        headers: { 'Authorization': `Bearer ${token}` }
                    });
                    if (!priceResponse.ok) throw new Error('Cannot fetch dynamic price');
                    const priceData = await priceResponse.json(); // { estimatedPrice: number, factors: ["high_demand", "weekend"] }

                    // C·∫≠p nh·∫≠t gi√° cu·ªëi c√πng v√† l√Ω do
                    setTotalCost(priceData.estimatedPrice + serviceFee);
                    setDynamicPriceInfo({ price: priceData.estimatedPrice, reason: `Gi√° ƒëi·ªÅu ch·ªânh theo: ${priceData.factors.join(', ')}` });
                    */
                   // Gi·∫£ l·∫≠p gi√° AI cao h∆°n 20% v√†o cu·ªëi tu·∫ßn
                   const isWeekend = start.getDay() === 0 || start.getDay() === 6;
                   const aiPrice = isWeekend ? fee * 1.2 : fee;
                   const reason = isWeekend ? "Gi√° cu·ªëi tu·∫ßn" : "Gi√° ng√†y th∆∞·ªùng";
                   setTotalCost(aiPrice + serviceFee);
                   setDynamicPriceInfo({ price: aiPrice, reason: reason });


                } catch (priceError) {
                    console.warn("Could not fetch dynamic price, using base price.", priceError);
                    setTotalCost(fee + serviceFee); // Fallback v·ªÅ gi√° c∆° s·ªü
                    setDynamicPriceInfo(null);
                }
            };
            fetchDynamicPrice();


        } else {
            // N·∫øu th·ªùi gian ch∆∞a ƒë·ªß, reset
            setCalculatedHours(0);
            setBaseParkingFee(0);
            setTotalCost(serviceFee);
            setDynamicPriceInfo(null);
        }
    }, [startTime, endTime, parkingLot.pricingTiers, vehicleType, serviceFee, parkingLot._id, token, API_URL]); // Dependencies

    // --- useEffect ƒë·ªÉ g·ªçi calculateCosts khi th·ªùi gian ho·∫∑c lo·∫°i xe thay ƒë·ªïi ---
    useEffect(() => {
        calculateCosts();
    }, [calculateCosts]); // Ch·ªâ ch·∫°y khi h√†m calculateCosts thay ƒë·ªïi (do dependencies c·ªßa n√≥ thay ƒë·ªïi)

     // --- useEffect ƒë·ªÉ c·∫≠p nh·∫≠t endTime m·∫∑c ƒë·ªãnh khi startTime thay ƒë·ªïi ---
     useEffect(() => {
         setEndTime(getDefaultEndTime(startTime));
     }, [startTime]);


    // --- H√†m Submit Form ---
    const handleSubmit = async (e) => {
        e.preventDefault();
        if (timeError && !timeError.includes('qu√° kh·ª©')) { // Cho ph√©p ƒë·∫∑t gi·ªù qu√° kh·ª© ƒë·ªÉ demo
            alert(`L·ªói th·ªùi gian: ${timeError}`);
            return;
        }
        if (!startTime || !endTime) {
            alert('Vui l√≤ng ch·ªçn th·ªùi gian b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c.');
            return;
        }

        setIsSubmitting(true);
        setSubmitStatus({ success: false, error: null });

        const bookingData = {
            slotId: slot._id,
            parkingLotId: parkingLot._id,
            startTime: new Date(startTime).toISOString(), // G·ª≠i ƒë·ªãnh d·∫°ng ISO cho backend
            endTime: new Date(endTime).toISOString(),
            vehicleNumber: vehicleNumber || null, // G·ª≠i null n·∫øu tr·ªëng
            vehicleType: vehicleType,
            // totalPrice: totalCost // Backend s·∫Ω t·ª± t√≠nh l·∫°i gi√° cu·ªëi c√πng ƒë·ªÉ ƒë·∫£m b·∫£o ch√≠nh x√°c
            // notes: notes // Th√™m ghi ch√∫ n·∫øu backend h·ªó tr·ª£
        };

        try {
            const response = await fetch(`${API_URL}/bookings`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify(bookingData)
            });

            const result = await response.json();

            if (!response.ok) {
                // (B√πng n·ªï üí•) X·ª≠ l√Ω l·ªói c·ª• th·ªÉ t·ª´ backend (v√≠ d·ª•: slot ƒë√£ b·ªã ƒë·∫∑t)
                let specificError = result.message || 'ƒê·∫∑t ch·ªó th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.';
                if (response.status === 400 && result.message.includes('ƒë√£ b·ªã chi·∫øm')) {
                    specificError = `R·∫•t ti·∫øc, √¥ ${slot.identifier} ƒë√£ ƒë∆∞·ª£c ng∆∞·ªùi kh√°c ƒë·∫∑t trong l√∫c b·∫°n thao t√°c. Vui l√≤ng ch·ªçn √¥ kh√°c.`;
                     // C√≥ th·ªÉ t·ª± ƒë·ªông refresh Visualizer ·ªü ƒë√¢y
                } else if (response.status === 400 && result.message.includes('ch·ªâ d√†nh cho')) {
                    specificError = `L·ªói lo·∫°i xe: ${result.message}`;
                }
                 throw new Error(specificError);
            }

            // ƒê·∫∑t ch·ªó th√†nh c√¥ng!
            setSubmitStatus({ success: true, error: null });
            // TODO: Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng ƒë·∫πp h∆°n (d√πng Toast)
             alert(`ƒê·∫∑t ch·ªó th√†nh c√¥ng cho √¥ ${slot.identifier}! M√£ ƒë·∫∑t ch·ªó: ${result._id}`);
             // C√≥ th·ªÉ chuy·ªÉn h∆∞·ªõng ho·∫∑c ƒë√≥ng modal/form
             // router.push('/dashboard?bookingSuccess=true');

        } catch (err) {
            console.error("L·ªói khi ƒë·∫∑t ch·ªó:", err);
            setSubmitStatus({ success: false, error: err.message });
        } finally {
            setIsSubmitting(false);
        }
    };

    // --- Render Form ---
    return (
        <form onSubmit={handleSubmit} className="space-y-6">

            {/* Th√¥ng b√°o l·ªói Submit */}
            {submitStatus.error && (
                <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="p-4 mb-4 text-sm text-red-700 bg-red-100 rounded-lg dark:bg-red-900/30 dark:text-red-300" role="alert">
                    <FontAwesomeIcon icon={faTimesCircle} className="mr-2"/> {submitStatus.error}
                </motion.div>
            )}
             {/* Th√¥ng b√°o th√†nh c√¥ng Submit */}
             {submitStatus.success && (
                <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="p-4 mb-4 text-sm text-green-700 bg-green-100 rounded-lg dark:bg-green-900/30 dark:text-green-300" role="alert">
                    <FontAwesomeIcon icon={faCheckCircle} className="mr-2"/> ƒê·∫∑t ch·ªó th√†nh c√¥ng! Ki·ªÉm tra l·ªãch s·ª≠ ƒë·∫∑t ch·ªó c·ªßa b·∫°n.
                </motion.div>
            )}


            {/* --- Input Th·ªùi gian --- */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {/* Th·ªùi gian b·∫Øt ƒë·∫ßu */}
                <div>
                    <label htmlFor="startTime" className="flex items-center text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        <FontAwesomeIcon icon={faCalendarAlt} className="mr-2 text-blue-500" /> B·∫Øt ƒë·∫ßu
                    </label>
                    <input
                        type="datetime-local"
                        id="startTime"
                        value={startTime}
                        onChange={(e) => setStartTime(e.target.value)}
                        required
                        min={getDefaultStartTime()} // NgƒÉn ch·ªçn qu√° kh·ª© (tr·ª´ khi c·∫ßn test)
                        className={`input-field w-full dark:bg-gray-700 dark:border-gray-600 ${timeError && timeError.includes('qu√° kh·ª©') ? 'border-yellow-500 ring-yellow-500' : (timeError ? 'border-red-500 ring-red-500' : '')}`}
                        disabled={isSubmitting}
                    />
                </div>
                {/* Th·ªùi gian k·∫øt th√∫c */}
                <div>
                    <label htmlFor="endTime" className="flex items-center text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        <FontAwesomeIcon icon={faClock} className="mr-2 text-blue-500" /> K·∫øt th√∫c
                    </label>
                    <input
                        type="datetime-local"
                        id="endTime"
                        value={endTime}
                        onChange={(e) => setEndTime(e.target.value)}
                        required
                        min={startTime} // K·∫øt th√∫c ph·∫£i sau b·∫Øt ƒë·∫ßu
                        className={`input-field w-full dark:bg-gray-700 dark:border-gray-600 ${timeError && !timeError.includes('qu√° kh·ª©') ? 'border-red-500 ring-red-500' : ''}`}
                        disabled={isSubmitting}
                    />
                </div>
            </div>
             {/* Hi·ªÉn th·ªã l·ªói th·ªùi gian */}
             {timeError && (
                 <motion.p initial={{ opacity: 0 }} animate={{ opacity: 1 }} className={`text-xs ${timeError.includes('qu√° kh·ª©') ? 'text-yellow-600 dark:text-yellow-400' : 'text-red-600 dark:text-red-400'} mt-1`}>
                    <FontAwesomeIcon icon={faInfoCircle} /> {timeError}
                 </motion.p>
             )}


            {/* --- Input Th√¥ng tin Xe --- */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                 {/* Lo·∫°i xe (TODO: Thay b·∫±ng Dropdown n·∫øu user c√≥ nhi·ªÅu xe) */}
                 <div>
                    <label htmlFor="vehicleType" className="flex items-center text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                         <FontAwesomeIcon icon={vehicleType === 'motorbike' ? faMotorcycle : faCar} className="mr-2 text-blue-500" /> Lo·∫°i xe
                    </label>
                     {/* Hi·ªán t·∫°i hi·ªÉn th·ªã d·∫°ng text, sau n√†y l√† dropdown */}
                    <input
                        type="text"
                        id="vehicleType"
                        value={vehicleType.replace(/_/g, ' ')} // Hi·ªÉn th·ªã 'car 4 seats' thay v√¨ 'car_4_seats'
                        readOnly
                        className="input-field w-full bg-gray-100 dark:bg-gray-700 dark:border-gray-600 cursor-not-allowed"
                     />
                     {/* Th√¥ng b√°o n·∫øu lo·∫°i xe kh√¥ng kh·ªõp √¥ (d√π Visualizer ƒë√£ ch·∫∑n) */}
                     {slot.vehicleType !== 'any' && slot.vehicleType !== vehicleType && (
                          <p className="text-xs text-yellow-600 dark:text-yellow-400 mt-1">
                              <FontAwesomeIcon icon={faInfoCircle} /> √î n√†y ∆∞u ti√™n lo·∫°i xe {slot.vehicleType.replace(/_/g, ' ')}.
                          </p>
                     )}
                 </div>
                {/* Bi·ªÉn s·ªë xe */}
                <div>
                    <label htmlFor="vehicleNumber" className="flex items-center text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        <i className="fas fa-id-card mr-2 text-blue-500"></i> Bi·ªÉn s·ªë xe <span className="text-xs text-gray-400 ml-1">(T√πy ch·ªçn)</span>
                    </label>
                    <input
                        type="text"
                        id="vehicleNumber"
                        value={vehicleNumber}
                        onChange={(e) => setVehicleNumber(e.target.value.toUpperCase())} // T·ª± vi·∫øt hoa
                        placeholder="VD: 29A12345"
                        className="input-field w-full dark:bg-gray-700 dark:border-gray-600 uppercase" // Hi·ªÉn th·ªã ch·ªØ hoa
                        disabled={isSubmitting}
                    />
                </div>
            </div>

             {/* --- Ghi ch√∫ (T√πy ch·ªçn) ---
             <div>
                 <label htmlFor="notes" className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Ghi ch√∫ th√™m</label>
                 <textarea
                     id="notes"
                     rows="2"
                     value={notes}
                     onChange={(e) => setNotes(e.target.value)}
                     placeholder="Y√™u c·∫ßu ƒë·∫∑c bi·ªát (n·∫øu c√≥)..."
                     className="input-field w-full dark:bg-gray-700 dark:border-gray-600"
                     disabled={isSubmitting}
                 ></textarea>
             </div>
             */}

            {/* --- T√≥m t·∫Øt Chi ph√≠ "ƒê·∫≥ng c·∫•p" --- */}
            <motion.div
                layout // Hi·ªáu ·ª©ng layout m∆∞·ª£t m√† khi gi√° thay ƒë·ªïi
                className="cost-summary bg-gradient-to-r from-blue-50 to-cyan-50 dark:from-gray-700 dark:to-gray-800 p-4 rounded-lg border border-blue-100 dark:border-gray-600"
            >
                <h4 className="text-md font-semibold mb-3 text-blue-800 dark:text-blue-300">Chi ph√≠ d·ª± ki·∫øn</h4>
                <div className="space-y-1 text-sm">
                    <div className="flex justify-between">
                        <span className="text-gray-600 dark:text-gray-400">Ph√≠ ƒë·ªó xe ({calculatedHours} gi·ªù):</span>
                        <span className="font-medium text-gray-800 dark:text-gray-200">{formatCurrency(baseParkingFee)}</span>
                    </div>
                     {/* Hi·ªÉn th·ªã gi√° AI v√† l√Ω do n·∫øu c√≥ */}
                    {dynamicPriceInfo && dynamicPriceInfo.price !== baseParkingFee && (
                        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="text-xs text-green-600 dark:text-green-400 flex items-center justify-end gap-1" title={dynamicPriceInfo.reason}>
                             <FontAwesomeIcon icon={faInfoCircle} />
                            <span>Gi√° ƒë√£ ƒëi·ªÅu ch·ªânh ({dynamicPriceInfo.reason}): {formatCurrency(dynamicPriceInfo.price)}</span>
                        </motion.div>
                    )}
                    <div className="flex justify-between">
                        <span className="text-gray-600 dark:text-gray-400">Ph√≠ d·ªãch v·ª•:</span>
                        <span className="font-medium text-gray-800 dark:text-gray-200">{formatCurrency(serviceFee)}</span>
                    </div>
                    <div className="border-t border-blue-200 dark:border-gray-600 my-2"></div>
                    <div className="flex justify-between text-base font-bold">
                        <span className="text-gray-900 dark:text-white">T·ªïng c·ªông:</span>
                        <span className="text-blue-600 dark:text-blue-400">{formatCurrency(totalCost)}</span>
                    </div>
                </div>
            </motion.div>

            {/* --- N√∫t Submit --- */}
            <motion.button
                type="submit"
                className="w-full btn-primary py-3 mt-4 text-base font-bold flex items-center justify-center gap-2 disabled:opacity-60 disabled:cursor-wait" // Th√™m style disable
                disabled={isSubmitting || !!timeError && !timeError.includes('qu√° kh·ª©')} // Disable n·∫øu ƒëang submit ho·∫∑c c√≥ l·ªói th·ªùi gian (tr·ª´ l·ªói qu√° kh·ª©)
                whileHover={!isSubmitting ? { scale: 1.02, boxShadow: '0 5px 15px rgba(59, 130, 246, 0.3)' } : {}}
                whileTap={!isSubmitting ? { scale: 0.98 } : {}}
            >
                {isSubmitting ? (
                    <>
                        <FontAwesomeIcon icon={faSpinner} spin /> ƒêang x·ª≠ l√Ω...
                    </>
                ) : (
                    <>
                         <FontAwesomeIcon icon={faCheckCircle} /> X√°c nh·∫≠n ƒê·∫∑t ch·ªó
                    </>
                )}
            </motion.button>
        </form>
    );
};

export default BookingForm;

// --- CSS b·ªï sung (c√≥ th·ªÉ ƒë·∫∑t trong globals.css) ---
/*
.input-field {
    @apply block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm dark:bg-gray-700 dark:border-gray-600 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500;
}

.btn-primary {
     @apply bg-gradient-to-r from-blue-500 to-cyan-500 hover:from-blue-600 hover:to-cyan-600 text-white font-bold py-2 px-4 rounded-lg focus:outline-none focus:shadow-outline transition-all duration-300 shadow-md;
}
*/