// components/BookingForm.js (PHI√äN B·∫¢N ƒê·∫†I N√ÇNG C·∫§P - CHI TI·∫æT & ƒê·∫≤NG C·∫§P NH·∫§T V1.0)
// T√≠ch h·ª£p nhi·ªÅu t√≠nh nƒÉng, validation chi ti·∫øt, g·ªçi gi√° AI, ch·ªçn xe, UI/UX m∆∞·ª£t m√†.

import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { useRouter } from 'next/router'; // Import useRouter ƒë·ªÉ c√≥ th·ªÉ chuy·ªÉn h∆∞·ªõng sau khi ƒë·∫∑t ch·ªó th√†nh c√¥ng
import { useAuth } from '@/context/AuthContext';
import { motion, AnimatePresence } from 'framer-motion';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import {
    faCalendarAlt, faClock, faCar, faMotorcycle, faDollarSign, faInfoCircle,
    faSpinner, faCheckCircle, faTimesCircle, faIdCard, faStickyNote,
    faBolt, faCarSide, // Th√™m icon faCarSide
    // Import th√™m icon n·∫øu c·∫ßn cho c√°c lo·∫°i xe kh√°c (faTruck, faBus, ...)
} from '@fortawesome/free-solid-svg-icons';
import {  faCreditCard } from '@fortawesome/free-solid-svg-icons';
// Import helpers (ƒê·∫£m b·∫£o file n√†y t·ªìn t·∫°i v√† ƒë√∫ng n·ªôi dung)
import { formatCurrency, debounce } from '@/utils/helpers';

// --- H·∫±ng s·ªë v√† C·∫•u h√¨nh ---
const SERVICE_FEE = 5000; // Ph√≠ d·ªãch v·ª• (c√≥ th·ªÉ l·∫•y t·ª´ config/backend sau)
const MIN_BOOKING_DURATION_MINUTES = 30; // Th·ªùi gian ƒë·∫∑t t·ªëi thi·ªÉu (v√≠ d·ª•: 30 ph√∫t)
const DEBOUNCE_TIME_MS = 500; // Th·ªùi gian ch·ªù khi thay ƒë·ªïi input th·ªùi gian tr∆∞·ªõc khi g·ªçi API gi√°

// --- Ki·ªÉu D·ªØ li·ªáu (S·ª≠ d·ª•ng JSDoc cho JS) ---
/**
 * @typedef {object} UserVehicle
 * @property {string} _id
 * @property {string} numberPlate
 * @property {'motorbike' | 'car_4_seats' | 'car_7_seats' | 'suv' | 'ev_car' | string} type
 * @property {boolean} isDefault
 * @property {string} [nickname] - T√™n g·ª£i nh·ªõ cho xe
 */

/**
 * @typedef {object} DynamicPriceInfo
 * @property {number} estimatedPrice - Gi√° cu·ªëi c√πng ∆∞·ªõc t√≠nh (ƒë√£ bao g·ªìm AI/ph·ª• ph√≠)
 * @property {number} basePrice - Gi√° g·ªëc (ch∆∞a t√≠nh ph·ª• ph√≠)
 * @property {string[]} factors - C√°c y·∫øu t·ªë ·∫£nh h∆∞·ªüng gi√° (vd: ['weekend_surcharge', 'high_demand'])
 * @property {string | null} reason - M√¥ t·∫£ ng·∫Øn g·ªçn l√Ω do gi√° thay ƒë·ªïi (vd: "Cu·ªëi tu·∫ßn, Nhu c·∫ßu cao")
 */

// --- Component Ch√≠nh ---
const BookingForm = ({ slot, parkingLot, user }) => {
    const router = useRouter(); // Kh·ªüi t·∫°o router
    const { token, user: authUser } = useAuth(); // L·∫•y token v√† th√¥ng tin user ƒë·∫ßy ƒë·ªß t·ª´ context
    const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000/api';

    // --- State cho Form Input ---
    const [startTime, setStartTime] = useState('');
    const [endTime, setEndTime] = useState('');
    const [vehicleNumber, setVehicleNumber] = useState('');
    // (B√πng n·ªï üí•) State ƒë·ªÉ l∆∞u danh s√°ch xe c·ªßa user v√† xe ƒëang ch·ªçn
    const [userVehicles, setUserVehicles] = useState(/** @type {UserVehicle[]} */ ([]));
    const [selectedVehicleId, setSelectedVehicleId] = useState(''); // ID c·ªßa xe ƒë∆∞·ª£c ch·ªçn t·ª´ danh s√°ch
    const [selectedVehicleType, setSelectedVehicleType] = useState(''); // Lo·∫°i xe ƒë∆∞·ª£c ch·ªçn (quan tr·ªçng cho t√≠nh gi√°)
    const [notes, setNotes] = useState('');

    // --- State cho T√≠nh to√°n & Hi·ªÉn th·ªã ---
    const [calculatedHours, setCalculatedHours] = useState(0);
    const [baseParkingFee, setBaseParkingFee] = useState(0);
    const [dynamicPriceInfo, setDynamicPriceInfo] = useState(/** @type {DynamicPriceInfo | null} */ (null));
    const [totalCost, setTotalCost] = useState(SERVICE_FEE);
    const [validationError, setValidationError] = useState({ time: '', vehicle: '', general: '' }); // L·ªói validation chi ti·∫øt
    const [isFetchingPrice, setIsFetchingPrice] = useState(false); // Tr·∫°ng th√°i ƒëang g·ªçi API gi√°

    // --- State cho vi·ªác Submit ---
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [submitStatus, setSubmitStatus] = useState({ success: false, message: null }); // { success: boolean, message: string | null }

    // --- H√†m l·∫•y gi√° tr·ªã m·∫∑c ƒë·ªãnh cho datetime-local ---
    const getDefaultDateTime = useCallback((minutesToAdd = 15) => {
        const now = new Date();
        now.setMinutes(now.getMinutes() + minutesToAdd);
        now.setSeconds(0);
        now.setMilliseconds(0);
        // Add timezone offset before slicing to get correct local time format
        const timezoneOffset = now.getTimezoneOffset() * 60000;
        const localISOTime = new Date(now.getTime() - timezoneOffset).toISOString().slice(0, 16);
        return localISOTime;
    }, []);

    // --- useEffect: Kh·ªüi t·∫°o gi√° tr·ªã m·∫∑c ƒë·ªãnh cho th·ªùi gian v√† xe ---
    useEffect(() => {
        setStartTime(getDefaultDateTime(15)); // M·∫∑c ƒë·ªãnh b·∫Øt ƒë·∫ßu sau 15 ph√∫t
        setEndTime(getDefaultDateTime(75));   // M·∫∑c ƒë·ªãnh k·∫øt th√∫c sau 1 gi·ªù 15 ph√∫t (t·ª©c l√† ƒë·∫∑t 1 ti·∫øng)

        // (B√πng n·ªï üí•) L·∫•y danh s√°ch xe c·ªßa user t·ª´ profile (gi·∫£ s·ª≠ c√≥ trong authUser)
        const vehicles = authUser?.profile?.vehicles || []; // C·∫ßn backend tr·∫£ v·ªÅ th√¥ng tin n√†y
        setUserVehicles(vehicles);

        // Ch·ªçn xe m·∫∑c ƒë·ªãnh ho·∫∑c xe ƒë·∫ßu ti√™n ph√π h·ª£p v·ªõi slot
        let defaultVehicle = vehicles.find(v => v.isDefault);
        if (!defaultVehicle && vehicles.length > 0) {
            // N·∫øu kh√¥ng c√≥ xe default, th·ª≠ t√¨m xe ƒë·∫ßu ti√™n ph√π h·ª£p v·ªõi lo·∫°i slot
            const suitableVehicle = vehicles.find(v => slot?.vehicleType === 'any' || v.type === slot?.vehicleType);
            defaultVehicle = suitableVehicle || vehicles[0]; // N·∫øu kh√¥ng c√≥ xe ph√π h·ª£p, l·∫•y xe ƒë·∫ßu ti√™n
        }

        if (defaultVehicle) {
            setSelectedVehicleId(defaultVehicle._id);
            setSelectedVehicleType(defaultVehicle.type);
            setVehicleNumber(defaultVehicle.numberPlate); // T·ª± ƒëi·ªÅn bi·ªÉn s·ªë xe m·∫∑c ƒë·ªãnh
        } else {
            // N·∫øu user ch∆∞a c√≥ xe n√†o, ho·∫∑c slot y√™u c·∫ßu lo·∫°i xe ƒë·∫∑c bi·ªát m√† user kh√¥ng c√≥
            // -> ∆Øu ti√™n lo·∫°i xe c·ªßa slot (n·∫øu kh√¥ng ph·∫£i 'any')
            const initialType = slot?.vehicleType !== 'any' ? slot.vehicleType : 'car_4_seats'; // M·∫∑c ƒë·ªãnh l√† √¥ t√¥ 4 ch·ªó n·∫øu slot l√† 'any'
            setSelectedVehicleType(initialType);
            setSelectedVehicleId(''); // Kh√¥ng c√≥ xe n√†o ƒë∆∞·ª£c ch·ªçn t·ª´ danh s√°ch
            setVehicleNumber(''); // ƒê·ªÉ tr·ªëng bi·ªÉn s·ªë
        }

    }, [authUser, slot, getDefaultDateTime]); // Ch·ªâ ch·∫°y 1 l·∫ßn khi component mount ho·∫∑c user/slot thay ƒë·ªïi

    // --- H√†m l·∫•y gi√° c∆° s·ªü t·ª´ parkingLot data ---
    const getBasePricePerHour = useCallback((vehicleType) => {
        if (!parkingLot?.pricingTiers || !vehicleType) return 0;
        const tier = parkingLot.pricingTiers[vehicleType];
        return tier?.basePricePerHour || 0;
    }, [parkingLot?.pricingTiers]);

    // --- H√†m t√≠nh s·ªë gi·ªù l√†m tr√≤n l√™n ---
    const calculateBookingHours = useCallback((start, end) => {
        if (!start || !end || end <= start) return 0;
        const diffMs = Math.abs(end - start);
        return Math.ceil(diffMs / 3600000); // 3600000 ms = 1 gi·ªù
    }, []);

    // --- (ƒê·∫≥ng c·∫•p ‚ú®) H√†m Fetch Gi√° ƒê·ªông/AI (S·ª≠ d·ª•ng useCallback v√† debounce) ---
    const fetchDynamicPriceEstimate = useCallback(debounce(async (fetchStartTime, fetchEndTime, fetchVehicleType) => {
        if (!fetchStartTime || !fetchEndTime || !fetchVehicleType || !parkingLot?._id || !token) {
            console.warn("[fetchDynamicPriceEstimate] Missing required params or context.");
            return; // Kh√¥ng g·ªçi API n·∫øu thi·∫øu th√¥ng tin
        }

        const start = new Date(fetchStartTime);
        const end = new Date(fetchEndTime);
        if (isNaN(start.getTime()) || isNaN(end.getTime()) || end <= start) {
            console.warn("[fetchDynamicPriceEstimate] Invalid time range.");
            return; // Kh√¥ng g·ªçi API n·∫øu th·ªùi gian kh√¥ng h·ª£p l·ªá
        }

        setIsFetchingPrice(true);
        setDynamicPriceInfo(null); // X√≥a gi√° c≈©
        console.log(`[fetchDynamicPriceEstimate] Calling API for lot ${parkingLot._id}, type ${fetchVehicleType}`);

        try {
            const params = new URLSearchParams({
                parkingLotId: parkingLot._id,
                startTime: start.toISOString(),
                endTime: end.toISOString(),
                vehicleType: fetchVehicleType
            });
            const priceResponse = await fetch(`${API_URL}/pricing/estimate?${params.toString()}`, {
                headers: { 'Authorization': `Bearer ${token}` }
            });
            const priceData = await priceResponse.json();

            if (!priceResponse.ok) {
                throw new Error(priceData.message || 'Kh√¥ng th·ªÉ l·∫•y gi√° d·ª± ki·∫øn.');
            }

            console.log("[fetchDynamicPriceEstimate] API response:", priceData);

            // Format l√Ω do gi√° ƒë·ªông
            let reason = null;
            if (priceData.factors && priceData.factors.length > 0 && !priceData.factors.includes('base_price')) {
                 reason = priceData.factors.map(factor => {
                        switch (factor) {
                            case 'weekend_surcharge': return 'Cu·ªëi tu·∫ßn';
                            case 'peak_hour_surcharge': return 'Gi·ªù cao ƒëi·ªÉm';
                            // Th√™m c√°c case kh√°c
                            default: return factor.replace(/_/g, ' ');
                        }
                    }).join(', ');
            }

            setDynamicPriceInfo({
                estimatedPrice: priceData.estimatedPrice,
                basePrice: priceData.basePrice,
                factors: priceData.factors || ['base_price'],
                reason: reason
            });
            // C·∫≠p nh·∫≠t l·∫°i totalCost d·ª±a tr√™n gi√° ƒë·ªông
            setTotalCost((priceData.estimatedPrice || baseParkingFee) + SERVICE_FEE);

        } catch (priceError) {
            console.error("[fetchDynamicPriceEstimate] Error:", priceError);
            setValidationError(prev => ({ ...prev, general: `L·ªói l·∫•y gi√°: ${priceError.message}` }));
            setDynamicPriceInfo(null); // Reset n·∫øu l·ªói
            // Gi·ªØ l·∫°i totalCost d·ª±a tr√™n gi√° c∆° s·ªü ƒë√£ t√≠nh tr∆∞·ªõc ƒë√≥
        } finally {
            setIsFetchingPrice(false);
        }
    }, DEBOUNCE_TIME_MS), [parkingLot?._id, token, API_URL, baseParkingFee]); // Th√™m baseParkingFee v√†o dependencies c·ªßa debounce wrapper

    // --- useEffect: T√≠nh to√°n l·∫°i chi ph√≠ v√† g·ªçi API gi√° khi input thay ƒë·ªïi ---
    useEffect(() => {
        // --- B∆∞·ªõc 1: Validation th·ªùi gian v√† lo·∫°i xe ---
        let timeError = '';
        let vehicleError = '';
        const start = startTime ? new Date(startTime) : null;
        const end = endTime ? new Date(endTime) : null;
        let currentHours = 0;
        let currentBaseFee = 0;

        if (start && end) {
            if (end <= start) {
                timeError = 'Gi·ªù k·∫øt th√∫c ph·∫£i sau gi·ªù b·∫Øt ƒë·∫ßu.';
            } else {
                const durationMinutes = (end.getTime() - start.getTime()) / 60000;
                if (durationMinutes < MIN_BOOKING_DURATION_MINUTES) {
                    timeError = `Th·ªùi gian ƒë·∫∑t t·ªëi thi·ªÉu l√† ${MIN_BOOKING_DURATION_MINUTES} ph√∫t.`;
                } else {
                    currentHours = calculateBookingHours(start, end);
                }
            }
             // C·∫£nh b√°o n·∫øu ch·ªçn gi·ªù qu√° kh·ª© (v·∫´n cho ph√©p ƒë·ªÉ demo, nh∆∞ng c√≥ c·∫£nh b√°o)
             const nowWithBuffer = new Date(Date.now() - 5 * 60000); // Cho ph√©p tr·ªÖ 5 ph√∫t
             if (start && start < nowWithBuffer) {
                 timeError = timeError ? `${timeError} Th·ªùi gian b·∫Øt ƒë·∫ßu ƒë√£ ·ªü trong qu√° kh·ª©.` : 'Th·ªùi gian b·∫Øt ƒë·∫ßu ƒë√£ ·ªü trong qu√° kh·ª©.';
             }
        } else if (!startTime || !endTime) {
            timeError = 'Vui l√≤ng ch·ªçn th·ªùi gian b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c.';
        }

        // Ki·ªÉm tra lo·∫°i xe ƒë∆∞·ª£c ch·ªçn c√≥ ph√π h·ª£p v·ªõi slot kh√¥ng
        if (slot?.vehicleType && slot.vehicleType !== 'any' && selectedVehicleType && selectedVehicleType !== slot.vehicleType) {
            vehicleError = `√î ${slot.identifier} ch·ªâ d√†nh cho lo·∫°i xe "${slot.vehicleType.replace(/_/g, ' ')}". Xe b·∫°n ch·ªçn l√† "${selectedVehicleType.replace(/_/g, ' ')}".`;
            // C√¢n nh·∫Øc: C√≥ n√™n ch·∫∑n submit hay ch·ªâ c·∫£nh b√°o? Hi·ªán t·∫°i ch·ªâ c·∫£nh b√°o.
        }

        // --- B∆∞·ªõc 2: T√≠nh gi√° c∆° s·ªü ---
        if (currentHours > 0 && selectedVehicleType) {
            const pricePerHour = getBasePricePerHour(selectedVehicleType);
            if (pricePerHour === 0 && parkingLot?.pricingTiers) {
                 // N·∫øu gi√° l√† 0, ki·ªÉm tra xem c√≥ tier gi√° cho lo·∫°i xe ƒë√≥ kh√¥ng
                 if (!parkingLot.pricingTiers[selectedVehicleType]) {
                     vehicleError = `B√£i xe n√†y ch∆∞a h·ªó tr·ª£ gi√° cho lo·∫°i xe "${selectedVehicleType.replace(/_/g, ' ')}".`;
                 }
            }
            currentBaseFee = currentHours * pricePerHour;
        }

        // --- B∆∞·ªõc 3: C·∫≠p nh·∫≠t state UI ---
        setValidationError({ time: timeError, vehicle: vehicleError, general: '' }); // X√≥a l·ªói general c≈©
        setCalculatedHours(currentHours);
        setBaseParkingFee(currentBaseFee);
        setTotalCost(currentBaseFee + SERVICE_FEE); // C·∫≠p nh·∫≠t totalCost v·ªõi gi√° c∆° s·ªü tr∆∞·ªõc khi g·ªçi API

        // --- B∆∞·ªõc 4: G·ªçi h√†m fetch gi√° ƒë·ªông (ƒë√£ ƒë∆∞·ª£c debounce) ---
        if (!timeError && !vehicleError && currentHours > 0 && selectedVehicleType) {
             // Ch·ªâ g·ªçi API n·∫øu th·ªùi gian v√† xe h·ª£p l·ªá c∆° b·∫£n
            fetchDynamicPriceEstimate(startTime, endTime, selectedVehicleType);
        } else {
            // N·∫øu c√≥ l·ªói validation, kh√¥ng g·ªçi API gi√° v√† reset gi√° ƒë·ªông
             setIsFetchingPrice(false); // ƒê·∫£m b·∫£o kh√¥ng c√≤n loading
             setDynamicPriceInfo(null);
        }

    // C√°c dependencies c·ªßa useEffect ch√≠nh n√†y
    }, [startTime, endTime, selectedVehicleType, slot?.vehicleType, slot?.identifier, getBasePricePerHour, calculateBookingHours, fetchDynamicPriceEstimate]);


    // --- H√†m Submit Form "ƒê·∫≥ng C·∫•p" ---
    const handleSubmit = async (e) => {
        e.preventDefault();
        // --- Validation Cu·ªëi C√πng Tr∆∞·ªõc Khi Submit ---
        if (validationError.time && !validationError.time.includes('qu√° kh·ª©')) {
            setSubmitStatus({ success: false, message: validationError.time });
            return;
        }
         if (validationError.vehicle) { // Ch·∫∑n n·∫øu c√≥ l·ªói lo·∫°i xe kh√¥ng ph√π h·ª£p
             setSubmitStatus({ success: false, message: validationError.vehicle });
             return;
         }
        if (calculatedHours <= 0) {
            setSubmitStatus({ success: false, message: 'Th·ªùi gian ƒë·∫∑t kh√¥ng h·ª£p l·ªá ho·∫∑c qu√° ng·∫Øn.' });
            return;
        }
        if (!selectedVehicleType) {
            setSubmitStatus({ success: false, message: 'Vui l√≤ng ch·ªçn lo·∫°i xe.' });
            return;
        }
         // (B√πng n·ªï üí•) Ki·ªÉm tra l·∫°i slot ngay tr∆∞·ªõc khi submit
         // ƒêi·ªÅu n√†y c·∫ßn m·ªôt API m·ªõi: GET /api/slots/:slotId/check-availability?parkingLotId=...
         /*
         try {
             const checkRes = await fetch(`${API_URL}/slots/${slot._id}/check-availability?parkingLotId=${parkingLot._id}`, { headers: { 'Authorization': `Bearer ${token}` } });
             const checkData = await checkRes.json();
             if (!checkRes.ok || !checkData.isAvailable) {
                 throw new Error(checkData.message || `√î ${slot.identifier} kh√¥ng c√≤n tr·ªëng.`);
             }
         } catch (checkErr) {
             setSubmitStatus({ success: false, message: `L·ªói ki·ªÉm tra √¥: ${checkErr.message}` });
             return;
         }
         */


        setIsSubmitting(true);
        setSubmitStatus({ success: false, message: null });

        const bookingData = {
            slotId: slot._id,
            parkingLotId: parkingLot._id,
            startTime: new Date(startTime).toISOString(),
            endTime: new Date(endTime).toISOString(),
            vehicleNumber: vehicleNumber || null,
            vehicleType: selectedVehicleType,
            notes: notes.trim() || null,
            // totalPrice: totalCost // Backend s·∫Ω t·ª± t√≠nh l·∫°i gi√° cu·ªëi c√πng
        };
        console.log("Submitting booking data:", bookingData);

        try {
            const response = await fetch(`${API_URL}/bookings`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
                body: JSON.stringify(bookingData)
            });
            const result = await response.json();

            if (!response.ok) {
                let specificError = result.message || 'ƒê·∫∑t ch·ªó th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.';
                if (response.status === 400 && result.message?.includes('ƒë√£ b·ªã chi·∫øm')) {
                    specificError = `R·∫•t ti·∫øc, √¥ ${slot.identifier} v·ª´a ƒë∆∞·ª£c ng∆∞·ªùi kh√°c ƒë·∫∑t. Vui l√≤ng ch·ªçn √¥ kh√°c.`;
                    // C√≥ th·ªÉ th√™m logic t·ª± ƒë·ªông refresh Visualizer ·ªü ƒë√¢y
                } else if (response.status === 400 && result.message?.includes('ch·ªâ d√†nh cho')) {
                    specificError = `L·ªói lo·∫°i xe: ${result.message}`;
                }
                throw new Error(specificError);
            }

            console.log("Booking successful:", result);
            setSubmitStatus({ success: true, message: `ƒê·∫∑t ch·ªó th√†nh c√¥ng cho √¥ ${slot.identifier}! M√£: ${result._id}` });

            // (B√πng n·ªï üí•) T√πy ch·ªçn: Chuy·ªÉn h∆∞·ªõng sau v√†i gi√¢y ho·∫∑c hi·ªÉn th·ªã n√∫t ƒë·ªÉ quay l·∫°i dashboard
             setTimeout(() => {
                 router.push('/dashboard?bookingSuccess=true'); // Chuy·ªÉn h∆∞·ªõng v·ªÅ dashboard v·ªõi query param
             }, 3000); // Ch·ªù 3 gi√¢y

        } catch (err) {
            console.error("L·ªói khi ƒë·∫∑t ch·ªó:", err);
            setSubmitStatus({ success: false, message: err.message });
        } finally {
            setIsSubmitting(false);
        }
    };

    // --- L·∫•y Icon cho Lo·∫°i xe ---
    const getVehicleIcon = (type) => {
        switch (type) {
            case 'motorbike': return faMotorcycle;
            case 'ev_car': return faChargingStation; // C·∫ßn import
            // Th√™m c√°c case kh√°c n·∫øu c·∫ßn
            default: return faCarSide; // Icon xe h∆°i chung
        }
    };

    // --- Render Form ---
    return (
        <form onSubmit={handleSubmit} className="space-y-6">

            {/* --- Th√¥ng b√°o Submit --- */}
            <AnimatePresence>
                {submitStatus.message && (
                    <motion.div
                        key="submit-status"
                        initial={{ opacity: 0, y: -10 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0 }}
                        className={`p-4 mb-4 text-sm rounded-lg flex items-center gap-2 ${
                            submitStatus.success
                                ? 'text-green-700 bg-green-100 dark:bg-green-900/30 dark:text-green-300'
                                : 'text-red-700 bg-red-100 dark:bg-red-900/30 dark:text-red-300'
                        }`} role="alert"
                    >
                        <FontAwesomeIcon icon={submitStatus.success ? faCheckCircle : faTimesCircle} className="flex-shrink-0"/>
                        {submitStatus.message}
                    </motion.div>
                )}
            </AnimatePresence>

            {/* --- Input Th·ªùi gian --- */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {/* Th·ªùi gian b·∫Øt ƒë·∫ßu */}
                <div>
                    <label htmlFor="startTime" className="label-form">
                        <FontAwesomeIcon icon={faCalendarAlt} /> B·∫Øt ƒë·∫ßu *
                    </label>
                    <input
                        type="datetime-local" id="startTime" value={startTime}
                        onChange={(e) => setStartTime(e.target.value)} required
                        min={getDefaultDateTime(0)} // Cho ph√©p ch·ªçn t·ª´ b√¢y gi·ªù
                        className={`input-field ${validationError.time && validationError.time.includes('qu√° kh·ª©') ? 'input-warning' : (validationError.time ? 'input-error' : '')}`}
                        disabled={isSubmitting || submitStatus.success}
                    />
                </div>
                {/* Th·ªùi gian k·∫øt th√∫c */}
                <div>
                    <label htmlFor="endTime" className="label-form">
                        <FontAwesomeIcon icon={faClock} /> K·∫øt th√∫c *
                    </label>
                    <input
                        type="datetime-local" id="endTime" value={endTime}
                        onChange={(e) => setEndTime(e.target.value)} required
                        min={startTime} // Ph·∫£i sau th·ªùi gian b·∫Øt ƒë·∫ßu
                        className={`input-field ${validationError.time && !validationError.time.includes('qu√° kh·ª©') ? 'input-error' : ''}`}
                        disabled={isSubmitting || submitStatus.success}
                    />
                </div>
            </div>
            {/* Hi·ªÉn th·ªã l·ªói th·ªùi gian */}
            {validationError.time && (
                 <motion.p initial={{ opacity: 0 }} animate={{ opacity: 1 }} className={`text-xs mt-1 ${validationError.time.includes('qu√° kh·ª©') ? 'text-yellow-600 dark:text-yellow-400' : 'text-red-600 dark:text-red-400'}`}>
                    <FontAwesomeIcon icon={faInfoCircle} /> {validationError.time}
                 </motion.p>
             )}

            {/* --- Input Th√¥ng tin Xe "ƒê·∫≥ng c·∫•p" --- */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                 {/* (B√πng n·ªï üí•) Ch·ªçn xe t·ª´ danh s√°ch ho·∫∑c nh·∫≠p m·ªõi */}
                 <div>
                    <label htmlFor="vehicleSelect" className="label-form">
                         <FontAwesomeIcon icon={getVehicleIcon(selectedVehicleType)} /> Ch·ªçn xe *
                    </label>
                    <select
                        id="vehicleSelect"
                        value={selectedVehicleId}
                        onChange={(e) => {
                            const vId = e.target.value;
                            setSelectedVehicleId(vId);
                            if (vId === 'new') {
                                setSelectedVehicleType(''); // Reset type khi ch·ªçn nh·∫≠p m·ªõi
                                setVehicleNumber('');
                            } else {
                                const selectedVeh = userVehicles.find(v => v._id === vId);
                                if (selectedVeh) {
                                    setSelectedVehicleType(selectedVeh.type);
                                    setVehicleNumber(selectedVeh.numberPlate);
                                }
                            }
                        }}
                        className="input-field"
                        disabled={isSubmitting || submitStatus.success}
                    >
                        <option value="" disabled={userVehicles.length > 0}>-- Ch·ªçn xe ƒë√£ l∆∞u --</option>
                        {userVehicles.map(vehicle => (
                            <option key={vehicle._id} value={vehicle._id}>
                                {vehicle.nickname || vehicle.numberPlate} ({vehicle.type.replace(/_/g, ' ')})
                            </option>
                        ))}
                        <option value="new">-- Nh·∫≠p th√¥ng tin xe m·ªõi --</option>
                    </select>
                 </div>

                 {/* Hi·ªÉn th·ªã input Lo·∫°i xe & Bi·ªÉn s·ªë khi ch·ªçn "Nh·∫≠p m·ªõi" ho·∫∑c ch∆∞a c√≥ xe */}
                 <AnimatePresence>
                 {(selectedVehicleId === 'new' || userVehicles.length === 0) && (
                     <motion.div
                        key="new-vehicle-inputs"
                        initial={{ opacity: 0, height: 0 }} animate={{ opacity: 1, height: 'auto' }} exit={{ opacity: 0, height: 0 }}
                        className="md:col-span-2 grid grid-cols-1 md:grid-cols-2 gap-4"
                     >
                         <div>
                             <label htmlFor="newVehicleType" className="label-form">Lo·∫°i xe m·ªõi *</label>
                             <select
                                 id="newVehicleType"
                                 value={selectedVehicleType}
                                 onChange={(e) => setSelectedVehicleType(e.target.value)}
                                 className={`input-field ${validationError.vehicle ? 'input-error' : ''}`}
                                 required={selectedVehicleId === 'new' || userVehicles.length === 0}
                                 disabled={isSubmitting || submitStatus.success}
                             >
                                 <option value="" disabled>-- Ch·ªçn lo·∫°i xe --</option>
                                 {/* L·∫•y enum t·ª´ model ParkingLot */}
                                 {(ParkingLot?.schema?.path('slots')?.schema?.path('vehicleType')?.enumValues || ['motorbike', 'car_4_seats', 'car_7_seats', 'suv', 'ev_car', 'any']).map(type => (
                                     type !== 'any' && // Kh√¥ng cho ƒë·∫∑t xe 'any'
                                     <option key={type} value={type}>{type.replace(/_/g, ' ')}</option>
                                 ))}
                             </select>
                         </div>
                         <div>
                             <label htmlFor="newVehicleNumber" className="label-form">Bi·ªÉn s·ªë xe m·ªõi <span className="label-optional">(T√πy ch·ªçn)</span></label>
                             <input
                                 type="text" id="newVehicleNumber" value={vehicleNumber}
                                 onChange={(e) => setVehicleNumber(e.target.value.toUpperCase())}
                                 placeholder="VD: 29A12345"
                                 className="input-field uppercase"
                                 disabled={isSubmitting || submitStatus.success}
                             />
                         </div>
                     </motion.div>
                 )}
                 </AnimatePresence>
                 {/* Hi·ªÉn th·ªã bi·ªÉn s·ªë c·ªßa xe ƒë√£ ch·ªçn (n·∫øu kh√¥ng ph·∫£i nh·∫≠p m·ªõi) */}
                 {selectedVehicleId && selectedVehicleId !== 'new' && (
                     <div>
                         <label htmlFor="selectedVehicleNumber" className="label-form"><FontAwesomeIcon icon={faIdCard} /> Bi·ªÉn s·ªë xe</label>
                         <input
                             type="text" id="selectedVehicleNumber" value={vehicleNumber} readOnly
                             className="input-field bg-gray-100 dark:bg-gray-700 cursor-not-allowed"
                         />
                     </div>
                 )}

            </div>
             {/* Hi·ªÉn th·ªã l·ªói/c·∫£nh b√°o v·ªÅ lo·∫°i xe */}
             {validationError.vehicle && (
                 <motion.p initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="text-xs text-red-600 dark:text-red-400 mt-1">
                    <FontAwesomeIcon icon={faExclamationTriangle} /> {validationError.vehicle}
                 </motion.p>
             )}


            {/* --- Ghi ch√∫ (T√πy ch·ªçn) --- */}
             <div>
                 <label htmlFor="notes" className="label-form">
                     <FontAwesomeIcon icon={faStickyNote} /> Ghi ch√∫ th√™m <span className="label-optional">(T√πy ch·ªçn)</span>
                 </label>
                 <textarea
                     id="notes" rows="2" value={notes}
                     onChange={(e) => setNotes(e.target.value)}
                     placeholder="Y√™u c·∫ßu ƒë·∫∑c bi·ªát (v√≠ d·ª•: c·∫ßn h·ªó tr·ª£ ƒë·ªó xe)..."
                     className="input-field"
                     disabled={isSubmitting || submitStatus.success}
                 ></textarea>
             </div>

            {/* --- T√≥m t·∫Øt Chi ph√≠ "ƒê·∫≥ng c·∫•p" (ƒê√£ c·∫≠p nh·∫≠t ·ªü l·∫ßn tr∆∞·ªõc) --- */}
            <motion.div
                layout // Hi·ªáu ·ª©ng layout m∆∞·ª£t m√† khi gi√° thay ƒë·ªïi
                className="cost-summary bg-gradient-to-r from-blue-50 to-cyan-50 dark:from-gray-700 dark:to-gray-800 p-4 rounded-lg border border-blue-100 dark:border-gray-600 relative overflow-hidden"
            >
                {/* Overlay loading khi ƒëang fetch gi√° */}
                 <AnimatePresence>
                 {isFetchingPrice && (
                     <motion.div
                         key="price-loading"
                         initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }}
                         className="absolute inset-0 bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm flex items-center justify-center z-10"
                     >
                         <FontAwesomeIcon icon={faSpinner} spin className="text-blue-500 text-xl mr-2"/>
                         <span className="text-sm text-gray-600 dark:text-gray-300">ƒêang l·∫•y gi√°...</span>
                     </motion.div>
                 )}
                 </AnimatePresence>

                <h4 className="text-md font-semibold mb-3 text-blue-800 dark:text-blue-300">Chi ph√≠ d·ª± ki·∫øn</h4>
                 {/* ... (N·ªôi dung hi·ªÉn th·ªã gi√° nh∆∞ ƒë√£ code ·ªü l·∫ßn tr∆∞·ªõc) ... */}
                 <div className="space-y-1.5 text-sm">
                    {calculatedHours > 0 && (
                        <div className="flex justify-between">
                            <span className="text-gray-600 dark:text-gray-400">Gi√° ƒë·ªó xe g·ªëc ({calculatedHours} gi·ªù):</span>
                            <span className="font-medium text-gray-700 dark:text-gray-300">{formatCurrency(baseParkingFee, '...')}</span>
                        </div>
                    )}
                    {dynamicPriceInfo && dynamicPriceInfo.estimatedPrice !== baseParkingFee && (
                        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="text-xs text-indigo-600 dark:text-indigo-400 flex items-center justify-between gap-1 pl-2 border-l-2 border-indigo-300 dark:border-indigo-600">
                             <span className="flex items-center gap-1"><FontAwesomeIcon icon={faBolt} />{dynamicPriceInfo.reason ? `Gi√° ƒë·ªông (${dynamicPriceInfo.reason}):` : 'Gi√° ∆∞·ªõc t√≠nh:'}</span>
                             <span className="font-semibold">{formatCurrency(dynamicPriceInfo.estimatedPrice, '...')}</span>
                        </motion.div>
                    )}
                     {dynamicPriceInfo && dynamicPriceInfo.estimatedPrice === baseParkingFee && !dynamicPriceInfo.reason && (
                         <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="text-xs text-gray-500 dark:text-gray-400 text-right">(√Åp d·ª•ng gi√° c∆° b·∫£n)</motion.div>
                     )}
                    <div className="flex justify-between">
                        <span className="text-gray-600 dark:text-gray-400">Ph√≠ d·ªãch v·ª•:</span>
                        <span className="font-medium text-gray-800 dark:text-gray-200">{formatCurrency(SERVICE_FEE)}</span>
                    </div>
                    <div className="border-t border-blue-200 dark:border-gray-600 my-2"></div>
                    <div className="flex justify-between text-base font-bold">
                        <span className="text-gray-900 dark:text-white">T·ªïng c·ªông:</span>
                        <span className="text-blue-600 dark:text-blue-400">{formatCurrency(totalCost, '...')}</span>
                    </div>
                    <p className="text-xs text-gray-500 dark:text-gray-400 mt-2 italic text-center"><FontAwesomeIcon icon={faInfoCircle} className="mr-1"/>Gi√° ∆∞·ªõc t√≠nh. Gi√° cu·ªëi c√πng d·ª±a tr√™n th·ªùi gian th·ª±c t·∫ø.</p>
                </div>
            </motion.div>

             {/* (B√πng n·ªï üí•) Placeholder cho Ch·ªçn Ph∆∞∆°ng th·ª©c Thanh to√°n */}
             <div className="payment-placeholder border-t border-gray-200 dark:border-gray-700 pt-5">
                 <h4 className="label-form mb-2"><FontAwesomeIcon icon={faCreditCard} /> Thanh to√°n</h4>
                 <div className="p-4 bg-gray-100 dark:bg-gray-700 rounded-lg text-center text-sm text-gray-500 dark:text-gray-400">
                     (T√≠nh nƒÉng thanh to√°n tr·ª±c tuy·∫øn qua Momo/ZaloPay/VNPay s·∫Ω ƒë∆∞·ª£c t√≠ch h·ª£p ·ªü giai ƒëo·∫°n sau. Hi·ªán t·∫°i, vui l√≤ng thanh to√°n t·∫°i b√£i.)
                 </div>
             </div>


            {/* --- N√∫t Submit --- */}
            <motion.button
                type="submit"
                className={`w-full btn-primary py-3 mt-4 text-base font-bold flex items-center justify-center gap-2 disabled:opacity-60 disabled:cursor-not-allowed ${submitStatus.success ? 'bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 !text-white' : ''}`}
                disabled={isSubmitting || submitStatus.success || !!validationError.time || !!validationError.vehicle || calculatedHours <= 0 || isFetchingPrice} // Disable n·∫øu ƒëang submit, th√†nh c√¥ng, c√≥ l·ªói, ch∆∞a t√≠nh gi·ªù, ƒëang fetch gi√°
                whileHover={!(isSubmitting || submitStatus.success) ? { scale: 1.02, boxShadow: '0 5px 15px rgba(59, 130, 246, 0.3)' } : {}}
                whileTap={!(isSubmitting || submitStatus.success) ? { scale: 0.98 } : {}}
            >
                {isSubmitting ? <><FontAwesomeIcon icon={faSpinner} spin /> ƒêang x·ª≠ l√Ω...</>
                 : submitStatus.success ? <><FontAwesomeIcon icon={faCheckCircle} /> ƒê·∫∑t ch·ªó th√†nh c√¥ng!</>
                 : <><FontAwesomeIcon icon={faCheckCircle} /> X√°c nh·∫≠n ƒê·∫∑t ch·ªó</>
                 }
            </motion.button>

             {/* Th√™m CSS class ti·ªán √≠ch */}
             <style jsx>{`
                .label-form {
                    @apply flex items-center gap-2 text-sm font-medium text-gray-700 dark:text-gray-300 mb-1;
                }
                .label-optional {
                    @apply text-xs text-gray-400 dark:text-gray-500 font-normal;
                }
                .input-field {
                    @apply block w-full px-4 py-2.5 border border-gray-300 rounded-lg shadow-sm transition duration-150 ease-in-out focus:ring-2 focus:ring-offset-1 focus:ring-blue-500 focus:border-blue-500 focus:outline-none dark:bg-gray-700 dark:border-gray-600 dark:text-white dark:placeholder-gray-400 dark:focus:ring-blue-500 dark:focus:border-blue-500 dark:focus:ring-offset-gray-800;
                }
                .input-error {
                     @apply border-red-500 ring-1 ring-red-500 focus:border-red-500 focus:ring-red-500 dark:border-red-600 dark:focus:border-red-600 dark:focus:ring-red-600;
                }
                 .input-warning {
                    @apply border-yellow-500 ring-1 ring-yellow-500 focus:border-yellow-500 focus:ring-yellow-500 dark:border-yellow-600 dark:focus:border-yellow-600 dark:focus:ring-yellow-600;
                 }
                 /* C·∫ßn import faCreditCard */
                 /* import { ..., faCreditCard } from '@fortawesome/free-solid-svg-icons'; */
             `}</style>

        </form>
    );
};



export default BookingForm;